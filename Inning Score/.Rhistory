train10<-rbind(b1,b2,b3,b4,b5,b6,b7,b8,b9)
test10<-b10
c10<-tree(y~., train10)
pred10<-predict(c10,test10[,2:21])
totalpred<-data.frame(matrix(NA,1000,1))
colnames(totalpred) <- c("pred prob")
totalpred[1:100,]<-pred1
totalpred[101:200,]<-pred2
totalpred[201:300,]<-pred3
totalpred[301:400,]<-pred4
totalpred[401:500,]<-pred5
totalpred[501:600,]<-pred6
totalpred[601:700,]<-pred7
totalpred[701:800,]<-pred8
totalpred[801:900,]<-pred9
totalpred[901:1000,]<-pred10
sens<-rep(0,1001)
spec<-rep(0,1001)
for (t in 0:1000){
threshold <- t/1000
pc<-as.numeric(totalpred>threshold)
TP<-sum(pc&d$y)
FP<-sum(pc)-TP
TN<-sum((1-pc)&(1-(d$y)))
FN<-sum(1-pc)-TN
sens[t+1]<-TP/(TP+FN)
spec[t+1]<-TN/(TN+FP)
}
plot(1-spec, sens,main="ROC Curve", xlab="1-Specificity", ylab="Sensitivity",
xlim=c(0, 1), ylim=c(0, 1), pch=4)
lines(1-spec, sens)
rm(list=ls())
setwd("C:/Users/Jaewon/Desktop/Fall 2014/Data Mining/Homework3")
d<-read.csv("hmw3.csv")
library(tree)
d<-d[sample(1:1000, 1000),]
b1<-d[1:100,]
b2<-d[101:200,]
b3<-d[201:300,]
b4<-d[301:400,]
b5<-d[401:500,]
b6<-d[501:600,]
b7<-d[601:700,]
b8<-d[701:800,]
b9<-d[801:900,]
b10<-d[901:1000,]
#10-fold cross validation
train1<-rbind(b2,b3,b4,b5,b6,b7,b8,b9,b10)
test1<-b1
c1<-tree(y~., train1)
pred1<-predict(c1,test1[,2:21])
train2<-rbind(b1,b3,b4,b5,b6,b7,b8,b9,b10)
test2<-b2
c2<-tree(y~., train2)
pred2<-predict(c2,test2[,2:21])
train3<-rbind(b1,b2,b4,b5,b6,b7,b8,b9,b10)
test3<-b3
c3<-tree(y~., train3)
pred3<-predict(c3,test3[,2:21])
train4<-rbind(b1,b2,b3,b5,b6,b7,b8,b9,b10)
test4<-b4
c4<-tree(y~., train4)
pred4<-predict(c4,test4[,2:21])
train5<-rbind(b1,b2,b3,b4,b6,b7,b8,b9,b10)
test5<-b5
c5<-tree(y~., train5)
pred5<-predict(c5,test5[,2:21])
train6<-rbind(b1,b2,b3,b4,b5,b7,b8,b9,b10)
test6<-b6
c6<-tree(y~., train6)
pred6<-predict(c6,test6[,2:21])
train7<-rbind(b1,b2,b3,b4,b5,b6,b8,b9,b10)
test7<-b7
c7<-tree(y~., train7)
pred7<-predict(c7,test7[,2:21])
train8<-rbind(b1,b2,b3,b4,b5,b6,b7,b9,b10)
test8<-b8
c8<-tree(y~., train8)
pred8<-predict(c8,test8[,2:21])
train9<-rbind(b1,b2,b3,b4,b5,b6,b7,b8,b10)
test9<-b9
c9<-tree(y~., train9)
pred9<-predict(c9,test9[,2:21])
train10<-rbind(b1,b2,b3,b4,b5,b6,b7,b8,b9)
test10<-b10
c10<-tree(y~., train10)
pred10<-predict(c10,test10[,2:21])
totalpred<-data.frame(matrix(NA,1000,1))
colnames(totalpred) <- c("pred prob")
totalpred[1:100,]<-pred1
totalpred[101:200,]<-pred2
totalpred[201:300,]<-pred3
totalpred[301:400,]<-pred4
totalpred[401:500,]<-pred5
totalpred[501:600,]<-pred6
totalpred[601:700,]<-pred7
totalpred[701:800,]<-pred8
totalpred[801:900,]<-pred9
totalpred[901:1000,]<-pred10
sens<-rep(0,1001)
spec<-rep(0,1001)
for (t in 0:1000){
threshold <- t/1000
pc<-as.numeric(totalpred>threshold)
TP<-sum(pc&d$y)
FP<-sum(pc)-TP
TN<-sum((1-pc)&(1-(d$y)))
FN<-sum(1-pc)-TN
sens[t+1]<-TP/(TP+FN)
spec[t+1]<-TN/(TN+FP)
}
plot(1-spec, sens,main="ROC Curve", xlab="1-Specificity", ylab="Sensitivity",
xlim=c(0, 1), ylim=c(0, 1), pch=4)
lines(1-spec, sens)
rm(list=ls())
getwd()
setwd("C:/Users/Jaewon/Desktop/Fall 2014/Data Mining/Homework3")
setwd("/Users/Jaewon/Desktop/Fall 2014/Data Mining/Homework3")
setwd("C:/Users/Jaewon/Desktop/Fall 2014/Data Mining/Homework3/")
rm(list=ls())
getwd()
setwd("C:\Users\Jaewon\Desktop\Fall 2014\Data Mining\Homework3")
d<-read.csv("hmw3.csv")
library(tree)
d<-d[sample(1:1000, 1000),]
b1<-d[1:100,]
b2<-d[101:200,]
b3<-d[201:300,]
b4<-d[301:400,]
b5<-d[401:500,]
b6<-d[501:600,]
b7<-d[601:700,]
b8<-d[701:800,]
b9<-d[801:900,]
b10<-d[901:1000,]
#10-fold cross validation
train1<-rbind(b2,b3,b4,b5,b6,b7,b8,b9,b10)
test1<-b1
c1<-tree(y~., train1)
pred1<-predict(c1,test1[,2:21])
train2<-rbind(b1,b3,b4,b5,b6,b7,b8,b9,b10)
test2<-b2
c2<-tree(y~., train2)
pred2<-predict(c2,test2[,2:21])
train3<-rbind(b1,b2,b4,b5,b6,b7,b8,b9,b10)
test3<-b3
c3<-tree(y~., train3)
pred3<-predict(c3,test3[,2:21])
train4<-rbind(b1,b2,b3,b5,b6,b7,b8,b9,b10)
test4<-b4
c4<-tree(y~., train4)
pred4<-predict(c4,test4[,2:21])
train5<-rbind(b1,b2,b3,b4,b6,b7,b8,b9,b10)
test5<-b5
c5<-tree(y~., train5)
pred5<-predict(c5,test5[,2:21])
train6<-rbind(b1,b2,b3,b4,b5,b7,b8,b9,b10)
test6<-b6
c6<-tree(y~., train6)
pred6<-predict(c6,test6[,2:21])
train7<-rbind(b1,b2,b3,b4,b5,b6,b8,b9,b10)
test7<-b7
c7<-tree(y~., train7)
pred7<-predict(c7,test7[,2:21])
train8<-rbind(b1,b2,b3,b4,b5,b6,b7,b9,b10)
test8<-b8
c8<-tree(y~., train8)
pred8<-predict(c8,test8[,2:21])
train9<-rbind(b1,b2,b3,b4,b5,b6,b7,b8,b10)
test9<-b9
c9<-tree(y~., train9)
pred9<-predict(c9,test9[,2:21])
train10<-rbind(b1,b2,b3,b4,b5,b6,b7,b8,b9)
test10<-b10
c10<-tree(y~., train10)
pred10<-predict(c10,test10[,2:21])
totalpred<-data.frame(matrix(NA,1000,1))
colnames(totalpred) <- c("pred prob")
totalpred[1:100,]<-pred1
totalpred[101:200,]<-pred2
totalpred[201:300,]<-pred3
totalpred[301:400,]<-pred4
totalpred[401:500,]<-pred5
totalpred[501:600,]<-pred6
totalpred[601:700,]<-pred7
totalpred[701:800,]<-pred8
totalpred[801:900,]<-pred9
totalpred[901:1000,]<-pred10
sens<-rep(0,1001)
spec<-rep(0,1001)
for (t in 0:1000){
threshold <- t/1000
pc<-as.numeric(totalpred>threshold)
TP<-sum(pc&d$y)
FP<-sum(pc)-TP
TN<-sum((1-pc)&(1-(d$y)))
FN<-sum(1-pc)-TN
sens[t+1]<-TP/(TP+FN)
spec[t+1]<-TN/(TN+FP)
}
plot(1-spec, sens,main="ROC Curve", xlab="1-Specificity", ylab="Sensitivity",
xlim=c(0, 1), ylim=c(0, 1), pch=4)
lines(1-spec, sens)
setwd("C:Users\Jaewon\Desktop\Fall 2014\Data Mining\Homework3")
setwd("\Users\Jaewon\Desktop\Fall 2014\Data Mining\Homework3")
setwd("C:\Users\Jaewon\Desktop\Fall 2014\Data Mining\Homework3")
setwd(C:\Users\Jaewon\Desktop\Fall 2014\Data Mining\Homework3)
setwd("C:\Users\Jaewon\Desktop\Fall 2014\Data Mining\Homework3")
rm(list=ls())
getwd()
setwd("C:\Users\Jaewon\Desktop\Fall 2014\Data Mining\Homework3")
setwd("C:\\Users\Jaewon\Desktop\Fall 2014\Data Mining\Homework3")
29883150^1811
help(mod)
help(modulo)
(29883150^1811) % 7243
pow(29883150,1811) % 7243
help(pow)
library(class)
library(MASS)
library(pROC)
library(ROCR)
library(tree)
library(e1071)
SpamData<-read.csv("spambase.data")
SpamResult<-SpamData[,58]
Attributes<-SpamData[,-58]
Instances<-nrow(SpamData)
sequence<-1:Instances
### 2. Support Vector Machine
SpamData<-read.csv("spambase.data")
SpamResult<-SpamData[,58]
Attributes<-SpamData[,-58]
Instances<-nrow(SpamData)
sequence<-1:Instances
# Randomly sample each instances
randomIndex<-sample(sequence,replace=FALSE)
# Declare a matrix for classification of test set after each cross validation
pred.svm<-matrix(0,nrow=460,ncol=10)
# Declare a matrix for true class after random sampling
randomOrder<-matrix(0,nrow=Instances,ncol=1)
# 10 fold Cross Validation
for (i in 1:10){
trainSet<-SpamData[-randomIndex[(1+(i-1)*460):(i*460)],]
testSet<-SpamData[randomIndex[(1+(i-1)*460):(i*460)],-58]
svm.model<-svm(X1~.,trainSet, "C-classification", "linear")
pred.svm[,i]<-predict(svm.model,testSet)
randomOrder[(1+(i-1)*460):(i*460)]<-SpamResult[randomIndex[(1+(i-1)*460):(i*460)]]
}
# Plot ROC Curve
pred.svm<-as.vector(pred.svm)-1
plot.roc(randomOrder,pred.svm)
roc.svm<-roc(randomOrder,pred.svm)
x<-auc(roc.svm)
text(0.2,0.1, x)
text(0.6,0.1,col="red","AUC: ")
# Calculate Missclassification Rate
rate<-(length(which(pred.svm-randomOrder!=0)))/Instances
sprintf("Misclassification Rate for SVM: %f", rate)
install.packages("maps")
library("maps")
data(countyMapEnv)
map("state",interior = FALSE)
map("state",boundary = FALSE, lty = 2, add = TRUE)
library("maps")
data(countyMapEnv)
map("state",interior = FALSE)
map("state",boundary = FALSE, lty = 2, add = TRUE)
map("texas", color = red)
library("maps")
data(countyMapEnv)
map("state",interior = FALSE)
map("state",boundary = FALSE, lty = 2, add = TRUE)
map("state",fill = TRUE, col = palette())
library("maps")
data(countyMapEnv)
map("state",interior = FALSE)
map("state",boundary = FALSE, lty = 2, add = TRUE)
map("state.vbm",fill = TRUE, col = palette())
library(pitchRx)
library(XML2R)
dat <- scrape(start="2014-09-01", end="2014-09-01", suffix=miniscoreboard.xml)
dat <- scrape(start="2014-09-01", end="2014-09-01", "suffix=miniscoreboard.xml")
library(pitchRx)
data<-scrape(start="2014-09-01", end="2014-09-01", suffix = miniscoreboard.xml)
data<-scrape(start="2014-09-01", end="2014-09-01", suffix = "miniscoreboard.xml")
xml <- XML2obs(paste0('http://gd2.mlb.com', scores$game_data_directory,'boxscore.xml'))
library(XML2R)
xml <- XML2obs(paste0('http://gd2.mlb.com', scores$game_data_directory,'boxscore.xml'))
xml <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory,'boxscore.xml'))
xml <- XML2Obs(paste0('http://gd2.mlb.com',dat$game_data_directory,'boxscore.xml'))
xml <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory,'boxscore.xml'))
library(pitchRx)
library(XML2R)
dat <- scrape(start="2014-09-01", end="2014-09-01", suffix="miniscoreboard.xml")
xml <- XML2Obs(paste0('http://gd2.mlb.com', score$game_data_directory,'boxscore.xml'))
xml <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory,'boxscore.xml'))
xml <- XML2Obs(paste0('http://gd2.mlb.com', scoress$game_data_directory,'boxscore.xml'))
xml <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory,'boxscore.xml'))
clear
clc
header(dat)
head(dat)
xml <- XML2Obs(paste0("http://gd2.mlb.com", scores$game_data_directory,"boxscore.xml"))
xml <- XML2Obs(paste0("http://gd2.mlb.com/", scores$game_data_directory,"boxscore.xml"))
library(pitchRx)
library(XML2R)
dat <- scrape(start="2014-09-01", end="2014-09-01", suffix="miniscoreboard.xml")
xml <- XML2Obs(paste0("http://gd2.mlb.com", dat$game_data_directory,"boxscore.xml"))
collapse_obs(xml)
library(pitchRx)
library(XML2R)
dat <- scrape(start="2014-09-01", end="2014-09-01", suffix="miniscoreboard.xml")
xml <- XML2Obs(paste0('http://gd2.mlb.com', dat$game_data_directory,'boxscore.xml'))
collapse_obs(xml)
library(pitchRx)
library(XML2R)
scores <- scrape(start="2014-09-01", end="2014-09-01", suffix="miniscoreboard.xml")
xml <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory,'boxscore.xml'))
collapse_obs(xml)
library(pitchRx)
library(XML2R)
scores <- scrape(start='2014-09-01', end='2014-09-01', suffix='miniscoreboard.xml')
xml <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory,'boxscore.xml'))
collapse_obs(xml)
my_dat <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory, 'boxscore.xml'))
install.packages("devtools")
my_dat <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory, 'boxscore.xml'))
library(devtools)
my_dat <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory, 'boxscore.xml'))
library(httr)
install.packages("httr")
install.packages("httr")
my_dat <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory, 'boxscore.xml'))
library(XML2R)
my_dat <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory, 'boxscore.xml'))
require(rsdmx)
install.packages("rsdmx")
library(rsdmx)
my_dat <- XML2Obs(paste0('http://gd2.mlb.com', scores$game_data_directory, 'boxscore.xml'))
xml <- XML2Obs(paste0("http://gd2.mlb.com/", scores$game_data_directory, "/boxscore.xml"))
library(pitchRx)
library(XML2R)
scores <- scrape(start="2015-09-01", end="2015-09-02", suffix="miniscoreboard.xml" )
xml <- XML2Obs(paste0("http://gd2.mlb.com/", scores$game_data_directory, "/boxscore.xml"))
collapse_obs(xml)
print(scores)
library(pitchRx)
library(XML2R)
scores <- scrape(start="2015-09-01", end="2015-09-02", suffix="miniscoreboard.xml" )
xml <- XML2Obs(paste0("http://gd2.mlb.com/", scores$game_data_directory, "/boxscore.xml"))
collapse_obs(xml)
xml <- XML2Obs(paste0("http://gd2.mlb.com/components", scores$game_data_directory, "/boxscore.xml"))
print(scores)
print scores$game_data_directory
print(scores$game_data_directory)
xml <- XML2Obs(paste0("http://gd2.mlb.com/components/game/mlb/year_2010/month_08/day_11/gid_2010_08_11_balmlb_clemlb_1/boxscore.xml"))
xml
xml$`boxscore//linescore//inning_line_score`
xml$`boxscore//linescore`
xml$`boxscore//linescore//inning_line_score`
head(xml$`boxscore//linescore//inning_line_score`)
collapse_obs(xml$`boxscore//linescore//inning_line_score`)
collapse_obs(xml$`boxscore//linescore//inning_line_score`)
collapse_obs(xml)
x <-collapse_obs(xml)
x$`boxscore//linescore//inning_line_score`
scores$game_id
scores$game$id
xml <- XML2Obs(paste0("http://gd2.mlb.com/components", scores$game$id, "/boxscore.xml"))
xml <- XML2Obs(paste0("http://gd2.mlb.com/components/game/mlb/", scores$game$id, "/boxscore.xml"))
clc
clear
library(pitchRx)
files <- c("miniscoreboard.xml")
dat <- scrape(start= "2014-09-01",end="2014-09-01", suffix=files)
print(dat)
dat$game$url
dat$game$day
dat$game$url
xml <- XML2Obs(dat$game$url)
view(xml)
print(xml)
files <- c("inning/inning_all.xml", "inning/inning_hit.xml", "miniscoreboard.xml", "players.xml")
dat <- scrape(start= "2014-09-01",end="2014-09-01", suffix=files)
dat$game$url
dat$game$url_scoreboard
files
view(files)
dat <- scrape(start= "2014-09-01",end="2014-09-01", suffix="miniscoreboard.xml")
dat$game$url
dat$game
dat$game$url_scoreboard
xml <- XML2Obs(dat$game$url_scoreboard)
xml
xml$`games//game`
xml$game$
dat
dat$game$url_scoreboard
xml <- XML2Obs(dat$game$url_scoreboard)
dat$game$id
sub("http://gd2.mlb.com/components/game/mlb/", "", head(urls))
urls <- makeUrls(start = "2014-09-01", end = "2014-09-01")
sub("http://gd2.mlb.com/components/game/mlb/", "", head(urls))
urls <- makeUrls(start = "2014-09-01", end = "2014-09-01")
gids <- sub("http://gd2.mlb.com/components/game/mlb/", "", head(urls))
xml <- XML2Obs(paste0("http://gd2.mlb.com/components/game/mlb/", gids, "/boxscore.xml"))
print(xml)
xml$`boxscore//linescore//inning_line_score`
collapse_obs(xml$`boxscore//linescore//inning_line_score`)
collapse_obs(xml)
x <- collapse_obs(xml)
x$`boxscore//linescore//inning_line_score`
scores <- collapse_obs(xml)
print(scores$`boxscore//linescore//inning_line_score`)
print(scores$`boxscore//linescore`)
library(XML)
url <- "http://www.baseball-reference.com/leagues/NL/2014-standings.shtml"
data <- readHTMLTable(url, stringAsFactors = FALSE)
data$standings_E
data[[1]]
data$expanded_standings_E
revised <- read.table(data$expanded_standings_E)
revised <- data.frame(data$expanded_standings_E)
revised <- data.frame(data$standings_E)
View(revised)
setwd("C:/Users/Jaewon/Desktop/Fall 2015/Research - Baseball Analytics/Inning Score/")
library(pitchRx)
library(XML2R)
library(dplyr)
# 2010 MLB Season: 2010-04-04 to 2010-10-03
# 2011 MLB Season: 2011-03-31 to 2011-09-28
# 2012 MLB Season: 2012-03-28 to 2012-10-03
# 2013 MLB Season: 2013-03-31 to 2013-09-30
# 2014 MLB Season: 2014-03-22 to 2014-09-28
# 2015 MLB Season: 2015-04-05 to 2015-10-04
urls <- makeUrls(start = "2010-04-04", end = "2015-04-06")
setwd("C:/Users/Jaewon/Desktop/Fall 2015/Research - Baseball Analytics/Inning Score/")
library(pitchRx)
library(XML2R)
library(dplyr)
# 2010 MLB Season: 2010-04-04 to 2010-10-03
# 2011 MLB Season: 2011-03-31 to 2011-09-28
# 2012 MLB Season: 2012-03-28 to 2012-10-03
# 2013 MLB Season: 2013-03-31 to 2013-09-30
# 2014 MLB Season: 2014-03-22 to 2014-09-28
# 2015 MLB Season: 2015-04-05 to 2015-10-04
urls <- makeUrls(start = "2010-04-04", end = "2015-04-06")
setwd("C:/Users/Jaewon/Desktop/Fall 2015/Research - Baseball Analytics/Inning Score/")
library(pitchRx)
library(XML2R)
library(dplyr)
# 2010 MLB Season: 2010-04-04 to 2010-10-03
# 2011 MLB Season: 2011-03-31 to 2011-09-28
# 2012 MLB Season: 2012-03-28 to 2012-10-03
# 2013 MLB Season: 2013-03-31 to 2013-09-30
# 2014 MLB Season: 2014-03-22 to 2014-09-28
# 2015 MLB Season: 2015-04-05 to 2015-10-04
urls <- makeUrls(start = "2015-04-05", end = "2015-04-06")
gids <- sub("http://gd2.mlb.com/components/game/mlb/", "", urls)
xml <- XML2Obs(paste0("http://gd2.mlb.com/components/game/mlb/", gids, "/linescore.xml"))
temp <- collapse_obs(xml)
game <- data.frame(temp$game)
valid_gid <- c()
temp$`game//linescore`
game$home_team_runs
dat <- readHTMLTable("http://www.baseball-reference.com/boxes/SFN/SFN201504170.shtml")
dat
table <- data.frame(dat)
dat <- readHTMLTable("http://www.baseball-reference.com/boxes/SFN/SFN201504170.shtml#ArizonaDiamondbacksbatting::none")
table <- data.frame(dat)
dat
url <- "http://www.baseball-reference.com/boxes/SFN/SFN201504170.shtml#ArizonaDiamondbacksbatting::none"
dat <- readHTMLTable(url, stringsAsFactors = FALSE)
dat[[1]]
dat[[3]]
dat[[2]]
dat[[4]]
dat[[5]]
dat[[6]]
dat[[7]]
dat[[8]]
dat[[9]]
dat[[10]]
dat[[11]]
dat[[25]]
dat[[20]]
dat[[18]]
table <- data.fram(dat[[18]])
table <- data.frame(dat[[18]])
table
View(table)
url <- "http://www.baseball-reference.com/boxes/ARI/ARI201504060.shtml"
dat <- readHTMLTable(url, stringsAsFactors = FALSE)
table <- data.frame(dat[[18]])
View(table)
url <- "http://www.baseball-reference.com/boxes/ARI/ARI201504060.shtml"
dat <- readHTMLTable(url, stringsAsFactors = FALSE)
table <- data.frame(dat[[17]])
View(table)
url <- "http://www.baseball-reference.com/boxes/ARI/ARI201504070.shtml"
dat <- readHTMLTable(url, stringsAsFactors = FALSE)
table <- data.frame(dat[[17]])
View(table)
url <- "http://www.baseball-reference.com/teams/tgl.cgi?team=BAL&t=b&year=2015"
dat <- readHTMLTable(url, stringsAsFactors = FALSE)
table <- data.frame(dat[[17]])
table <- data.frame(dat)
table
View(table)
View(table)
View(game)
